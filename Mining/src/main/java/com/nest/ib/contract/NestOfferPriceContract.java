package com.nest.ib.contract;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;


/**
 * Contract price
 */
public class NestOfferPriceContract extends Contract {
    private static final String BINARY = "6080604052662386f26fc10000600455600260055560086006553480156200002657600080fd5b5060405160208062002962833981018060405260208110156200004857600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260118152602001807f6e6573742e76332e6f666665724d61696e00000000000000000000000000000081525060200191505060206040518083038186803b1580156200015957600080fd5b505afa1580156200016e573d6000803e3d6000fd5b505050506040513d60208110156200018557600080fd5b8101908080519060200190929190505050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600e8152602001807f6e6573742e76332e61626f6e757300000000000000000000000000000000000081525060200191505060206040518083038186803b1580156200029657600080fd5b505afa158015620002ab573d6000803e3d6000fd5b505050506040513d6020811015620002c257600080fd5b8101908080519060200190929190505050600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061263e80620003246000396000f3fe6080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806308d0099e146100ca57806317ae7a581461016d5780631892f494146101fc5780631b4418481461022e5780634a6238d41461029a5780635d4d3bf7146102c55780636e873d1f146103345780638f6f1c591461037957806391501949146103ef578063a781e7f81461042a578063a834d32e1461047b578063bb21baf8146104da578063e4f282ad14610537575b600080fd5b610116600480360360408110156100e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105a0565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561015957808201518184015260208101905061013e565b505050509050019250505060405180910390f35b34801561017957600080fd5b506101fa600480360360a081101561019057600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109f5565b005b34801561020857600080fd5b50610211610eeb565b604051808381526020018281526020019250505060405180910390f35b34801561023a57600080fd5b5061027d6004803603602081101561025157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610efc565b604051808381526020018281526020019250505060405180910390f35b3480156102a657600080fd5b506102af611044565b6040518082815260200191505060405180910390f35b3480156102d157600080fd5b50610332600480360360808110156102e857600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061104e565b005b34801561034057600080fd5b506103776004803603604081101561035757600080fd5b8101908080359060200190929190803590602001909291905050506112a7565b005b34801561038557600080fd5b506103d26004803603604081101561039c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114d9565b604051808381526020018281526020019250505060405180910390f35b3480156103fb57600080fd5b506104286004803603602081101561041257600080fd5b810190808035906020019092919050505061161b565b005b34801561043657600080fd5b506104796004803603602081101561044d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611795565b005b6104bd6004803603602081101561049157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bbc565b604051808381526020018281526020019250505060405180910390f35b3480156104e657600080fd5b50610535600480360360408110156104fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611fc6565b005b34801561054357600080fd5b506105866004803603602081101561055a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612191565b604051808215151515815260200191505060405180910390f35b606060001515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561066a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f496e20626c61636b4c697374000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600401549050806106cb6001866121e790919063ffffffff16565b111515156106d857600080fd5b6000610709856106fb612710670de0b6b3a764000061223190919063ffffffff16565b61227b90919063ffffffff16565b905066071afd498d00008110156107345766071afd498d00003414151561072f57600080fd5b61076d565b662386f26fc1000081111561075d57662386f26fc100003414151561075857600080fd5b61076c565b803414151561076b57600080fd5b5b5b600061078360038761227b90919063ffffffff16565b905060008090506060826040519080825280602002602001820160405280156107bb5781602001602082028038833980820191505090505b50905060008090505b8383101561096157438760000160008881526020019081526020016000206003015410158061080b5750600087600001600088815260200190815260200160002060000154145b1561082357600086141561081e57610961565b610946565b86600001600087815260200190815260200160002060000154828480600101955081518110151561085057fe5b906020019060200201818152505086600001600087815260200190815260200160002060010154828480600101955081518110151561088b57fe5b90602001906020020181815250508660000160008781526020019081526020016000206002015482848060010195508151811015156108c657fe5b9060200190602002018181525050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156109455786600001600087815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b5b61095a6001876121e790919063ffffffff16565b95506107c4565b6109b4600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166109af600a6109a16006543461227b90919063ffffffff16565b61223190919063ffffffff16565b612348565b6109e5816109e0600a6109d26005543461227b90919063ffffffff16565b61223190919063ffffffff16565b612348565b8197505050505050505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260118152602001807f6e6573742e76332e6f666665724d61696e00000000000000000000000000000081525060200191505060206040518083038186803b158015610ab457600080fd5b505afa158015610ac8573d6000803e3d6000fd5b505050506040513d6020811015610ade57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4e6f20617574686f72697479000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160040154905081600001600082815260200190815260200160002060020154431415610d725760008260000160008381526020019081526020016000209050610c2d8882600001546123b790919063ffffffff16565b8160000181905550610c4c8782600101546123b790919063ffffffff16565b8160010181905550838160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060030154861115610cad578581600301819055505b806002015443141515610cc4574381600201819055505b80836000016000848152602001908152602001600020600082015481600001556001820154816001015560028201548160020155600382015481600301556004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505050610ee2565b610d8a600183600401546123b790919063ffffffff16565b82600401819055506000826000016000846004015481526020019081526020016000209050878160000181905550868160010181905550858160030181905550438160020181905550838160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508083600001600085600401548152602001908152602001600020600082015481600001556001820154816001015560028201548160020155600382015481600301556004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050826004015483600101600043815260200190815260200160002081905550505b50505050505050565b600080600554600654915091509091565b6000803273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fa2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f49742063616e2774206265206120636f6e74726163740000000000000000000081525060200191505060405180910390fd5b610faa6125d7565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040805190810160405290816002820160408051908101604052908160008201548152602001600182015481525050815260200160048201548152505090508060000151600001518160000151602001519250925050915091565b6000600454905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260118152602001807f6e6573742e76332e6f666665724d61696e00000000000000000000000000000081525060200191505060206040518083038186803b15801561110d57600080fd5b505afa158015611121573d6000803e3d6000fd5b505050506040513d602081101561113757600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4e6f20617574686f72697479000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001016000848152602001908152602001600020549050600082600001600083815260200190815260200160002090506112778782600001546121e790919063ffffffff16565b81600001819055506112968682600101546121e790919063ffffffff16565b816001018190555050505050505050565b600115156000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3bf06f1336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561136557600080fd5b505afa158015611379573d6000803e3d6000fd5b505050506040513d602081101561138f57600080fd5b81019080805190602001909291905050501515141515611417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4e6f20617574686f72697479000000000000000000000000000000000000000081525060200191505060405180910390fd5b600a61142c82846123b790919063ffffffff16565b1415156114c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f57726f6e6720657870656e736520616c6c6f636174696f6e2070726f706f727481526020017f696f6e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b81600581905550806006819055505050565b6000803273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561157f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f49742063616e2774206265206120636f6e74726163740000000000000000000081525060200191505060405180910390fd5b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600101600086815260200190815260200160002054905081600001600082815260200190815260200160002060000154826000016000838152602001908152602001600020600101549350935050509250929050565b600115156000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3bf06f1336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156116d957600080fd5b505afa1580156116ed573d6000803e3d6000fd5b505050506040513d602081101561170357600080fd5b8101908080519060200190929190505050151514151561178b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4e6f20617574686f72697479000000000000000000000000000000000000000081525060200191505060405180910390fd5b8060048190555050565b600115156000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3bf06f1336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561185357600080fd5b505afa158015611867573d6000803e3d6000fd5b505050506040513d602081101561187d57600080fd5b81019080805190602001909291905050501515141515611905576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4e6f20617574686f72697479000000000000000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260118152602001807f6e6573742e76332e6f666665724d61696e00000000000000000000000000000081525060200191505060206040518083038186803b158015611a0457600080fd5b505afa158015611a18573d6000803e3d6000fd5b505050506040513d6020811015611a2e57600080fd5b8101908080519060200190929190505050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fe77e866040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600e8152602001807f6e6573742e76332e61626f6e757300000000000000000000000000000000000081525060200191505060206040518083038186803b158015611b3e57600080fd5b505afa158015611b52573d6000803e3d6000fd5b505050506040513d6020811015611b6857600080fd5b8101908080519060200190929190505050600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060001515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611c87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f496e20626c61636b4c697374000000000000000000000000000000000000000081525060200191505060405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015611d115750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611d905760045434141515611d8f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f50726963652063616c6c20636861726765206572726f7200000000000000000081525060200191505060405180910390fd5b5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816004015490505b4382600001600083815260200190815260200160002060030154101580611e1c5750600082600001600083815260200190815260200160002060000154145b15611e4a576000811415611e2f57611e4a565b611e436001826121e790919063ffffffff16565b9050611ddd565b6000826000016000838152602001908152602001600020905080600001548360020160000181905550806001015483600201600101819055506000341115611f3557611edf600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611eda600a611ecc6006543461227b90919063ffffffff16565b61223190919063ffffffff16565b612348565b611f348160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611f2f600a611f216005543461227b90919063ffffffff16565b61223190919063ffffffff16565b612348565b5b7fddfa535cacea1d1e69a1a85fabd4691a3e0102bd5c80acd82f249a88d5d509888682600001548360010154604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a18060000154816001015494509450505050915091565b600115156000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3bf06f1336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561208457600080fd5b505afa158015612098573d6000803e3d6000fd5b505050506040513d60208110156120ae57600080fd5b81019080805190602001909291905050501515141515612136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4e6f20617574686f72697479000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600061222983836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612441565b905092915050565b600061227383836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612503565b905092915050565b60008083141561228e5760009050612342565b600082840290508284828115156122a157fe5b0414151561233d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f81526020017f770000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b809150505b92915050565b60006123698373ffffffffffffffffffffffffffffffffffffffff166125cd565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156123b1573d6000803e3d6000fd5b50505050565b6000808284019050838110151515612437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600083831115829015156124f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124b557808201518184015260208101905061249a565b50505050905090810190601f1680156124e25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6000808311829015156125b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561257657808201518184015260208101905061255b565b50505050905090810190601f1680156125a35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858115156125bf57fe5b049050809150509392505050565b6000819050919050565b6060604051908101604052806125eb6125f8565b8152602001600081525090565b60408051908101604052806000815260200160008152509056fea165627a7a72305820a3a965ad9342253f0d3b48be8e1c7f5b4a951fe1b8e41c8124b5ce84ceab11950029";

    protected NestOfferPriceContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected NestOfferPriceContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<NowTokenPriceEventResponse> getNowTokenPriceEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NowTokenPrice",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<NowTokenPriceEventResponse> responses = new ArrayList<NowTokenPriceEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NowTokenPriceEventResponse typedResponse = new NowTokenPriceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.a = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.b = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.c = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NowTokenPriceEventResponse> nowTokenPriceEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NowTokenPrice",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NowTokenPriceEventResponse>() {
            @Override
            public NowTokenPriceEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                NowTokenPriceEventResponse typedResponse = new NowTokenPriceEventResponse();
                typedResponse.log = log;
                typedResponse.a = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.b = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.c = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> updateAndCheckPriceList(String tokenAddress, BigInteger num, BigInteger weiValue) {
        final Function function = new Function(
                "updateAndCheckPriceList",
                Arrays.<Type>asList(new Address(tokenAddress),
                new Uint256(num)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> addPrice(BigInteger ethAmount, BigInteger tokenAmount, BigInteger endBlock, String tokenAddress, String offerOwner) {
        final Function function = new Function(
                "addPrice",
                Arrays.<Type>asList(new Uint256(ethAmount),
                new Uint256(tokenAmount),
                new Uint256(endBlock),
                new Address(tokenAddress),
                new Address(offerOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> checkPriceCostProportion() {
        final Function function = new Function("checkPriceCostProportion",
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> checkPriceNow(String tokenAddress) {
        final Function function = new Function("checkPriceNow",
                Arrays.<Type>asList(new Address(tokenAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> checkPriceCost() {
        final Function function = new Function("checkPriceCost",
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> changePrice(BigInteger ethAmount, BigInteger tokenAmount, String tokenAddress, BigInteger blockNum) {
        final Function function = new Function(
                "changePrice",
                Arrays.<Type>asList(new Uint256(ethAmount),
                new Uint256(tokenAmount),
                new Address(tokenAddress),
                new Uint256(blockNum)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changePriceCostProportion(BigInteger user, BigInteger abonus) {
        final Function function = new Function(
                "changePriceCostProportion",
                Arrays.<Type>asList(new Uint256(user),
                new Uint256(abonus)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> checkPriceForBlock(String tokenAddress, BigInteger blockNum) {
        final Function function = new Function("checkPriceForBlock",
                Arrays.<Type>asList(new Address(tokenAddress),
                new Uint256(blockNum)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> changePriceCost(BigInteger amount) {
        final Function function = new Function(
                "changePriceCost",
                Arrays.<Type>asList(new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeMapping(String voteFactory) {
        final Function function = new Function(
                "changeMapping",
                Arrays.<Type>asList(new Address(voteFactory)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateAndCheckPriceNow(String tokenAddress, BigInteger weiValue) {
        final Function function = new Function(
                "updateAndCheckPriceNow",
                Arrays.<Type>asList(new Address(tokenAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> changeBlackList(String add, Boolean isBlack) {
        final Function function = new Function(
                "changeBlackList",
                Arrays.<Type>asList(new Address(add),
                new Bool(isBlack)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> checkBlackList(String add) {
        final Function function = new Function("checkBlackList",
                Arrays.<Type>asList(new Address(add)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public static RemoteCall<NestOfferPriceContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String voteFactory) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(voteFactory)));
        return deployRemoteCall(NestOfferPriceContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<NestOfferPriceContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String voteFactory) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(voteFactory)));
        return deployRemoteCall(NestOfferPriceContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static NestOfferPriceContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new NestOfferPriceContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static NestOfferPriceContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NestOfferPriceContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class NowTokenPriceEventResponse {
        public Log log;

        public String a;

        public BigInteger b;

        public BigInteger c;
    }
}
